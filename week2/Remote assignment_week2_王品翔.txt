AppWorks School Remote Learnning Assignment - Week2
王品翔

A1.  繼承可讓一個子類別擁有父類別的屬性與方法，無須重寫
     子類別也可重新定義父類別沒有的屬性與方法，也可以改寫原本的屬性與方法
     通常會先寫出一個較基本、廣泛的類別，再寫出底下的類別去擴充屬性及方法

A2.  使用方法split()，將想要分開的字串變數名稱後加上.split()
     argument為用來判別分開位置的關鍵字串或正則表示式

_______________________  Sample code start  ________________________

fun main(args: Array<String>) {
    val originalString1 = "Jacky has a big nose."

    val splitedString = originalString1.split("\\s".toRegex())
    for (strs in splitedString) {
        println(strs)
    }

    val originalString2 = "Dog, Cat, Fish, Dolphin, Tiger"

    val splitedString2 = originalString2.split(",\\s".toRegex())
    for (strs2 in splitedString2) {
        println(strs2)
    }
}
_______________________  Sample code end  __________________________



A3.Kotlin提供map，但他不能移除已有的key-value，以下為mutableMap範例

_______________________  Sample code start  ________________________

fun main() {
    // 宣告一個可改寫的map : MutableMap
    var mutableMap: MutableMap<String, Int> = mutableMapOf()

    mutableMap.put("Grace", 2548196)
    mutableMap.put("David", 2426635)
    mutableMap.put("Jackson", 2727158)
    mutableMap.put("Allen", 2999411)
    mutableMap.put("Police Office", 110)

    for ((name, phone) in mutableMap) {
        println("$name : $phone")
    }
}
_______________________  Sample code end  __________________________



A4.  ArrayList可視為一個可改變大小的array
     LinkedList則是一連串用指標(pointer)指向下一個與上一個元素的資料結構
     以下用幾種操作方法顯示兩者差異
     1.取得第n個元素:ArrayList可立刻取得，LinkedList需要從第一個元素往後移動n-1次

     2.加入元素在尾端:若ArrayList的容量上可容納則可立刻加入，若不能則需要O(n)
       LinkedList需要花費O(n)，若是有儲存尾端元素的指標只需要O(1)但這只是特例

     3.變更元素在任一位置:ArrayList的表現與2.中相同但沒有改變陣列大小的問題
       LinkedList一定需要一個一個往後移動才能在該位置改變元素

     4.在任意位置加入元素:ArrayList需花費時間將後面的元素再往後移動，若改變大小還需要搬動所有元素
       LinkedList只需從第一個元素開始往後找到特定位置，不斷重複此指令花費的時間不變

     5.刪除元素:ArraayList與4.相似，須將後面的元素往前搬移
       LinkedList與4.相同

A5.  Integers: Int, Long
     Floating point: Float, Double
     Boolean: Boolean

A6.  Int使用32個位元儲存，扣掉一個位元判別正負號以及"0"的表示方式
     Int的最大值為 2^31 - 1 = 2147483647

     可使用Long，Long用64個位元來表示整數